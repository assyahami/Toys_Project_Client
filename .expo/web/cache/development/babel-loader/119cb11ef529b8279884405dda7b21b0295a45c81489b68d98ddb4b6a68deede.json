{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createPerformanceLogger;\nexports.getCurrentTimestamp = void 0;\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar Systrace = _interopRequireWildcard(require(\"../Performance/Systrace\"));\nvar _Performance = _interopRequireDefault(require(\"../WebPerformance/Performance\"));\nvar _infoLog = _interopRequireDefault(require(\"./infoLog\"));\nvar _global$nativeQPLTime;\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\nvar _cookies = {};\nvar PRINT_TO_CONSOLE = false;\nvar WEB_PERFORMANCE_PREFIX = 'global_perf_';\nvar performance = new _Performance.default();\nvar getCurrentTimestamp = (_global$nativeQPLTime = global.nativeQPLTimestamp) != null ? _global$nativeQPLTime : global.performance.now.bind(global.performance);\nexports.getCurrentTimestamp = getCurrentTimestamp;\nvar PerformanceLogger = function () {\n  function PerformanceLogger(isLoggingForWebPerformance) {\n    (0, _classCallCheck2.default)(this, PerformanceLogger);\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    this._pointExtras = {};\n    this._closed = false;\n    this._isLoggingForWebPerformance = false;\n    this._isLoggingForWebPerformance = isLoggingForWebPerformance === true;\n  }\n  (0, _createClass2.default)(PerformanceLogger, [{\n    key: \"addTimespan\",\n    value: function addTimespan(key, startTime, endTime, startExtras, endExtras) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        startTime: startTime,\n        endTime: endTime,\n        totalTime: endTime - (startTime || 0),\n        startExtras: startExtras,\n        endExtras: endExtras\n      };\n      if (this._isLoggingForWebPerformance) {\n        performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n          start: startTime,\n          end: endTime\n        });\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(performanceLogger) {\n      this._timespans = Object.assign({}, performanceLogger.getTimespans(), this._timespans);\n      this._extras = Object.assign({}, performanceLogger.getExtras(), this._extras);\n      this._points = Object.assign({}, performanceLogger.getPoints(), this._points);\n      this._pointExtras = Object.assign({}, performanceLogger.getPointExtras(), this._pointExtras);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._timespans = {};\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'clear');\n      }\n    }\n  }, {\n    key: \"clearCompleted\",\n    value: function clearCompleted() {\n      for (var _key in this._timespans) {\n        var _this$_timespans$_key;\n        if (((_this$_timespans$_key = this._timespans[_key]) == null ? void 0 : _this$_timespans$_key.totalTime) != null) {\n          delete this._timespans[_key];\n        }\n      }\n      this._extras = {};\n      this._points = {};\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'clearCompleted');\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._closed = true;\n    }\n  }, {\n    key: \"currentTimestamp\",\n    value: function currentTimestamp() {\n      return getCurrentTimestamp();\n    }\n  }, {\n    key: \"getExtras\",\n    value: function getExtras() {\n      return this._extras;\n    }\n  }, {\n    key: \"getPoints\",\n    value: function getPoints() {\n      return this._points;\n    }\n  }, {\n    key: \"getPointExtras\",\n    value: function getPointExtras() {\n      return this._pointExtras;\n    }\n  }, {\n    key: \"getTimespans\",\n    value: function getTimespans() {\n      return this._timespans;\n    }\n  }, {\n    key: \"hasTimespan\",\n    value: function hasTimespan(key) {\n      return !!this._timespans[key];\n    }\n  }, {\n    key: \"isClosed\",\n    value: function isClosed() {\n      return this._closed;\n    }\n  }, {\n    key: \"logEverything\",\n    value: function logEverything() {\n      if (PRINT_TO_CONSOLE) {\n        for (var _key2 in this._timespans) {\n          var _this$_timespans$_key2;\n          if (((_this$_timespans$_key2 = this._timespans[_key2]) == null ? void 0 : _this$_timespans$_key2.totalTime) != null) {\n            (0, _infoLog.default)(_key2 + ': ' + this._timespans[_key2].totalTime + 'ms');\n          }\n        }\n        (0, _infoLog.default)(this._extras);\n        for (var _key3 in this._points) {\n          if (this._points[_key3] != null) {\n            (0, _infoLog.default)(_key3 + ': ' + this._points[_key3] + 'ms');\n          }\n        }\n      }\n    }\n  }, {\n    key: \"markPoint\",\n    value: function markPoint(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: markPoint - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._points[key] != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to mark a point that has been already logged ', key);\n        }\n        return;\n      }\n      this._points[key] = timestamp;\n      if (extras) {\n        this._pointExtras[key] = extras;\n      }\n      if (this._isLoggingForWebPerformance) {\n        performance.mark(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n          startTime: timestamp\n        });\n      }\n    }\n  }, {\n    key: \"removeExtra\",\n    value: function removeExtra(key) {\n      var value = this._extras[key];\n      delete this._extras[key];\n      return value;\n    }\n  }, {\n    key: \"setExtra\",\n    value: function setExtra(key, value) {\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: setExtra - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._extras.hasOwnProperty(key)) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to set an extra that already exists ', {\n            key: key,\n            currentValue: this._extras[key],\n            attemptedValue: value\n          });\n        }\n        return;\n      }\n      this._extras[key] = value;\n    }\n  }, {\n    key: \"startTimespan\",\n    value: function startTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: startTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      if (this._timespans[key]) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n        }\n        return;\n      }\n      this._timespans[key] = {\n        startTime: timestamp,\n        startExtras: extras\n      };\n      _cookies[key] = Systrace.beginAsyncEvent(key);\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'start: ' + key);\n      }\n      if (this._isLoggingForWebPerformance) {\n        performance.mark(`${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, {\n          startTime: timestamp\n        });\n      }\n    }\n  }, {\n    key: \"stopTimespan\",\n    value: function stopTimespan(key) {\n      var timestamp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getCurrentTimestamp();\n      var extras = arguments.length > 2 ? arguments[2] : undefined;\n      if (this._closed) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n        }\n        return;\n      }\n      var timespan = this._timespans[key];\n      if (!timespan || timespan.startTime == null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n        }\n        return;\n      }\n      if (timespan.endTime != null) {\n        if (PRINT_TO_CONSOLE && __DEV__) {\n          (0, _infoLog.default)('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n        }\n        return;\n      }\n      timespan.endExtras = extras;\n      timespan.endTime = timestamp;\n      timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n      if (PRINT_TO_CONSOLE) {\n        (0, _infoLog.default)('PerformanceLogger.js', 'end: ' + key);\n      }\n      if (_cookies[key] != null) {\n        Systrace.endAsyncEvent(key, _cookies[key]);\n        delete _cookies[key];\n      }\n      if (this._isLoggingForWebPerformance) {\n        performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n          start: `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`,\n          end: timestamp\n        });\n      }\n    }\n  }]);\n  return PerformanceLogger;\n}();\nfunction createPerformanceLogger(isLoggingForWebPerformance) {\n  return new PerformanceLogger(isLoggingForWebPerformance);\n}","map":{"version":3,"names":["Systrace","_interopRequireWildcard","require","_Performance","_interopRequireDefault","_infoLog","_global$nativeQPLTime","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","_cookies","PRINT_TO_CONSOLE","WEB_PERFORMANCE_PREFIX","performance","Performance","getCurrentTimestamp","global","nativeQPLTimestamp","now","bind","exports","PerformanceLogger","isLoggingForWebPerformance","_classCallCheck2","_timespans","_extras","_points","_pointExtras","_closed","_isLoggingForWebPerformance","_createClass2","value","addTimespan","startTime","endTime","startExtras","endExtras","__DEV__","infoLog","totalTime","measure","start","end","append","performanceLogger","assign","getTimespans","getExtras","getPoints","getPointExtras","clear","clearCompleted","_this$_timespans$_key","close","currentTimestamp","hasTimespan","isClosed","logEverything","_this$_timespans$_key2","markPoint","timestamp","arguments","length","undefined","extras","mark","removeExtra","setExtra","currentValue","attemptedValue","startTimespan","beginAsyncEvent","stopTimespan","timespan","endAsyncEvent","createPerformanceLogger"],"sources":["C:/companytask/Toys_Project/client/Toys_Projects/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {\n  Extras,\n  ExtraValue,\n  IPerformanceLogger,\n  Timespan,\n} from './IPerformanceLogger';\n\nimport * as Systrace from '../Performance/Systrace';\nimport Performance from '../WebPerformance/Performance';\nimport infoLog from './infoLog';\n\nconst _cookies: {[key: string]: number, ...} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\n// This is the prefix for optional logging points/timespans as marks/measures via Performance API,\n// used to separate these internally from other marks/measures\nconst WEB_PERFORMANCE_PREFIX = 'global_perf_';\n\n// TODO: Remove once T143070419 is done\nconst performance = new Performance();\n\nexport const getCurrentTimestamp: () => number =\n  global.nativeQPLTimestamp ?? global.performance.now.bind(global.performance);\n\nclass PerformanceLogger implements IPerformanceLogger {\n  _timespans: {[key: string]: ?Timespan} = {};\n  _extras: {[key: string]: ?ExtraValue} = {};\n  _points: {[key: string]: ?number} = {};\n  _pointExtras: {[key: string]: ?Extras, ...} = {};\n  _closed: boolean = false;\n  _isLoggingForWebPerformance: boolean = false;\n\n  constructor(isLoggingForWebPerformance?: boolean) {\n    this._isLoggingForWebPerformance = isLoggingForWebPerformance === true;\n  }\n\n  addTimespan(\n    key: string,\n    startTime: number,\n    endTime: number,\n    startExtras?: Extras,\n    endExtras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime,\n      endTime,\n      totalTime: endTime - (startTime || 0),\n      startExtras,\n      endExtras,\n    };\n\n    if (this._isLoggingForWebPerformance) {\n      performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        start: startTime,\n        end: endTime,\n      });\n    }\n  }\n\n  append(performanceLogger: IPerformanceLogger) {\n    this._timespans = {\n      ...performanceLogger.getTimespans(),\n      ...this._timespans,\n    };\n    this._extras = {...performanceLogger.getExtras(), ...this._extras};\n    this._points = {...performanceLogger.getPoints(), ...this._points};\n    this._pointExtras = {\n      ...performanceLogger.getPointExtras(),\n      ...this._pointExtras,\n    };\n  }\n\n  clear() {\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  }\n\n  clearCompleted() {\n    for (const key in this._timespans) {\n      if (this._timespans[key]?.totalTime != null) {\n        delete this._timespans[key];\n      }\n    }\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  }\n\n  close() {\n    this._closed = true;\n  }\n\n  currentTimestamp(): number {\n    return getCurrentTimestamp();\n  }\n\n  getExtras(): {[key: string]: ?ExtraValue} {\n    return this._extras;\n  }\n\n  getPoints(): {[key: string]: ?number} {\n    return this._points;\n  }\n\n  getPointExtras(): {[key: string]: ?Extras} {\n    return this._pointExtras;\n  }\n\n  getTimespans(): {[key: string]: ?Timespan} {\n    return this._timespans;\n  }\n\n  hasTimespan(key: string): boolean {\n    return !!this._timespans[key];\n  }\n\n  isClosed(): boolean {\n    return this._closed;\n  }\n\n  logEverything() {\n    if (PRINT_TO_CONSOLE) {\n      // log timespans\n      for (const key in this._timespans) {\n        if (this._timespans[key]?.totalTime != null) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n\n      // log extras\n      infoLog(this._extras);\n\n      // log points\n      for (const key in this._points) {\n        if (this._points[key] != null) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    }\n  }\n\n  markPoint(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._points[key] != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to mark a point that has been already logged ',\n          key,\n        );\n      }\n      return;\n    }\n    this._points[key] = timestamp;\n    if (extras) {\n      this._pointExtras[key] = extras;\n    }\n\n    if (this._isLoggingForWebPerformance) {\n      performance.mark(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        startTime: timestamp,\n      });\n    }\n  }\n\n  removeExtra(key: string): ?ExtraValue {\n    const value = this._extras[key];\n    delete this._extras[key];\n    return value;\n  }\n\n  setExtra(key: string, value: ExtraValue) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    if (this._extras.hasOwnProperty(key)) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: this._extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    this._extras[key] = value;\n  }\n\n  startTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: startTimespan - has closed ignoring: ',\n          key,\n        );\n      }\n      return;\n    }\n\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime: timestamp,\n      startExtras: extras,\n    };\n    _cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n\n    if (this._isLoggingForWebPerformance) {\n      performance.mark(`${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`, {\n        startTime: timestamp,\n      });\n    }\n  }\n\n  stopTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    const timespan = this._timespans[key];\n    if (!timespan || timespan.startTime == null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endExtras = extras;\n    timespan.endTime = timestamp;\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    if (_cookies[key] != null) {\n      Systrace.endAsyncEvent(key, _cookies[key]);\n      delete _cookies[key];\n    }\n\n    if (this._isLoggingForWebPerformance) {\n      performance.measure(`${WEB_PERFORMANCE_PREFIX}_${key}`, {\n        start: `${WEB_PERFORMANCE_PREFIX}_timespan_start_${key}`,\n        end: timestamp,\n      });\n    }\n  }\n}\n\n// Re-exporting for backwards compatibility with all the clients that\n// may still import it from this module.\nexport type {Extras, ExtraValue, IPerformanceLogger, Timespan};\n\n/**\n * This function creates performance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nexport default function createPerformanceLogger(\n  isLoggingForWebPerformance?: boolean,\n): IPerformanceLogger {\n  return new PerformanceLogger(isLoggingForWebPerformance);\n}\n"],"mappings":";;;;;;;;AAiBA,IAAAA,QAAA,GAAAC,uBAAA,CAAAC,OAAA;AACA,IAAAC,YAAA,GAAAC,sBAAA,CAAAF,OAAA;AACA,IAAAG,QAAA,GAAAD,sBAAA,CAAAF,OAAA;AAAgC,IAAAI,qBAAA;AAAA,SAAAC,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAP,wBAAAW,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,oBAAAA,GAAA,wBAAAA,GAAA,4BAAAE,OAAA,EAAAF,GAAA,UAAAG,KAAA,GAAAR,wBAAA,CAAAC,WAAA,OAAAO,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAJ,GAAA,YAAAG,KAAA,CAAAE,GAAA,CAAAL,GAAA,SAAAM,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAX,GAAA,QAAAW,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAd,GAAA,EAAAW,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAV,GAAA,EAAAW,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAX,GAAA,CAAAW,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAF,GAAA,MAAAG,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAhB,GAAA,EAAAM,MAAA,YAAAA,MAAA;AAEhC,IAAMW,QAAsC,GAAG,CAAC,CAAC;AAEjD,IAAMC,gBAAuB,GAAG,KAAK;AAIrC,IAAMC,sBAAsB,GAAG,cAAc;AAG7C,IAAMC,WAAW,GAAG,IAAIC,oBAAW,CAAC,CAAC;AAE9B,IAAMC,mBAAiC,IAAA5B,qBAAA,GAC5C6B,MAAM,CAACC,kBAAkB,YAAA9B,qBAAA,GAAI6B,MAAM,CAACH,WAAW,CAACK,GAAG,CAACC,IAAI,CAACH,MAAM,CAACH,WAAW,CAAC;AAACO,OAAA,CAAAL,mBAAA,GAAAA,mBAAA;AAAA,IAEzEM,iBAAiB;EAQrB,SAAAA,kBAAYC,0BAAoC,EAAE;IAAA,IAAAC,gBAAA,CAAA5B,OAAA,QAAA0B,iBAAA;IAAA,KAPlDG,UAAU,GAA+B,CAAC,CAAC;IAAA,KAC3CC,OAAO,GAAiC,CAAC,CAAC;IAAA,KAC1CC,OAAO,GAA6B,CAAC,CAAC;IAAA,KACtCC,YAAY,GAAkC,CAAC,CAAC;IAAA,KAChDC,OAAO,GAAY,KAAK;IAAA,KACxBC,2BAA2B,GAAY,KAAK;IAG1C,IAAI,CAACA,2BAA2B,GAAGP,0BAA0B,KAAK,IAAI;EACxE;EAAC,IAAAQ,aAAA,CAAAnC,OAAA,EAAA0B,iBAAA;IAAAjB,GAAA;IAAA2B,KAAA,EAED,SAAAC,YACE5B,GAAW,EACX6B,SAAiB,EACjBC,OAAe,EACfC,WAAoB,EACpBC,SAAkB,EAClB;MACA,IAAI,IAAI,CAACR,OAAO,EAAE;QAChB,IAAIjB,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EAAC,wDAAwD,EAAElC,GAAG,CAAC;QACxE;QACA;MACF;MACA,IAAI,IAAI,CAACoB,UAAU,CAACpB,GAAG,CAAC,EAAE;QACxB,IAAIO,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,sEAAsE,EACtElC,GACF,CAAC;QACH;QACA;MACF;MAEA,IAAI,CAACoB,UAAU,CAACpB,GAAG,CAAC,GAAG;QACrB6B,SAAS,EAATA,SAAS;QACTC,OAAO,EAAPA,OAAO;QACPK,SAAS,EAAEL,OAAO,IAAID,SAAS,IAAI,CAAC,CAAC;QACrCE,WAAW,EAAXA,WAAW;QACXC,SAAS,EAATA;MACF,CAAC;MAED,IAAI,IAAI,CAACP,2BAA2B,EAAE;QACpChB,WAAW,CAAC2B,OAAO,CAAE,GAAE5B,sBAAuB,IAAGR,GAAI,EAAC,EAAE;UACtDqC,KAAK,EAAER,SAAS;UAChBS,GAAG,EAAER;QACP,CAAC,CAAC;MACJ;IACF;EAAC;IAAA9B,GAAA;IAAA2B,KAAA,EAED,SAAAY,OAAOC,iBAAqC,EAAE;MAC5C,IAAI,CAACpB,UAAU,GAAAvB,MAAA,CAAA4C,MAAA,KACVD,iBAAiB,CAACE,YAAY,CAAC,CAAC,EAChC,IAAI,CAACtB,UAAU,CACnB;MACD,IAAI,CAACC,OAAO,GAAAxB,MAAA,CAAA4C,MAAA,KAAOD,iBAAiB,CAACG,SAAS,CAAC,CAAC,EAAK,IAAI,CAACtB,OAAO,CAAC;MAClE,IAAI,CAACC,OAAO,GAAAzB,MAAA,CAAA4C,MAAA,KAAOD,iBAAiB,CAACI,SAAS,CAAC,CAAC,EAAK,IAAI,CAACtB,OAAO,CAAC;MAClE,IAAI,CAACC,YAAY,GAAA1B,MAAA,CAAA4C,MAAA,KACZD,iBAAiB,CAACK,cAAc,CAAC,CAAC,EAClC,IAAI,CAACtB,YAAY,CACrB;IACH;EAAC;IAAAvB,GAAA;IAAA2B,KAAA,EAED,SAAAmB,MAAA,EAAQ;MACN,IAAI,CAAC1B,UAAU,GAAG,CAAC,CAAC;MACpB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;MACjB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;MACjB,IAAIf,gBAAgB,EAAE;QACpB,IAAA2B,gBAAO,EAAC,sBAAsB,EAAE,OAAO,CAAC;MAC1C;IACF;EAAC;IAAAlC,GAAA;IAAA2B,KAAA,EAED,SAAAoB,eAAA,EAAiB;MACf,KAAK,IAAM/C,IAAG,IAAI,IAAI,CAACoB,UAAU,EAAE;QAAA,IAAA4B,qBAAA;QACjC,IAAI,EAAAA,qBAAA,OAAI,CAAC5B,UAAU,CAACpB,IAAG,CAAC,qBAApBgD,qBAAA,CAAsBb,SAAS,KAAI,IAAI,EAAE;UAC3C,OAAO,IAAI,CAACf,UAAU,CAACpB,IAAG,CAAC;QAC7B;MACF;MACA,IAAI,CAACqB,OAAO,GAAG,CAAC,CAAC;MACjB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;MACjB,IAAIf,gBAAgB,EAAE;QACpB,IAAA2B,gBAAO,EAAC,sBAAsB,EAAE,gBAAgB,CAAC;MACnD;IACF;EAAC;IAAAlC,GAAA;IAAA2B,KAAA,EAED,SAAAsB,MAAA,EAAQ;MACN,IAAI,CAACzB,OAAO,GAAG,IAAI;IACrB;EAAC;IAAAxB,GAAA;IAAA2B,KAAA,EAED,SAAAuB,iBAAA,EAA2B;MACzB,OAAOvC,mBAAmB,CAAC,CAAC;IAC9B;EAAC;IAAAX,GAAA;IAAA2B,KAAA,EAED,SAAAgB,UAAA,EAA0C;MACxC,OAAO,IAAI,CAACtB,OAAO;IACrB;EAAC;IAAArB,GAAA;IAAA2B,KAAA,EAED,SAAAiB,UAAA,EAAsC;MACpC,OAAO,IAAI,CAACtB,OAAO;IACrB;EAAC;IAAAtB,GAAA;IAAA2B,KAAA,EAED,SAAAkB,eAAA,EAA2C;MACzC,OAAO,IAAI,CAACtB,YAAY;IAC1B;EAAC;IAAAvB,GAAA;IAAA2B,KAAA,EAED,SAAAe,aAAA,EAA2C;MACzC,OAAO,IAAI,CAACtB,UAAU;IACxB;EAAC;IAAApB,GAAA;IAAA2B,KAAA,EAED,SAAAwB,YAAYnD,GAAW,EAAW;MAChC,OAAO,CAAC,CAAC,IAAI,CAACoB,UAAU,CAACpB,GAAG,CAAC;IAC/B;EAAC;IAAAA,GAAA;IAAA2B,KAAA,EAED,SAAAyB,SAAA,EAAoB;MAClB,OAAO,IAAI,CAAC5B,OAAO;IACrB;EAAC;IAAAxB,GAAA;IAAA2B,KAAA,EAED,SAAA0B,cAAA,EAAgB;MACd,IAAI9C,gBAAgB,EAAE;QAEpB,KAAK,IAAMP,KAAG,IAAI,IAAI,CAACoB,UAAU,EAAE;UAAA,IAAAkC,sBAAA;UACjC,IAAI,EAAAA,sBAAA,OAAI,CAAClC,UAAU,CAACpB,KAAG,CAAC,qBAApBsD,sBAAA,CAAsBnB,SAAS,KAAI,IAAI,EAAE;YAC3C,IAAAD,gBAAO,EAAClC,KAAG,GAAG,IAAI,GAAG,IAAI,CAACoB,UAAU,CAACpB,KAAG,CAAC,CAACmC,SAAS,GAAG,IAAI,CAAC;UAC7D;QACF;QAGA,IAAAD,gBAAO,EAAC,IAAI,CAACb,OAAO,CAAC;QAGrB,KAAK,IAAMrB,KAAG,IAAI,IAAI,CAACsB,OAAO,EAAE;UAC9B,IAAI,IAAI,CAACA,OAAO,CAACtB,KAAG,CAAC,IAAI,IAAI,EAAE;YAC7B,IAAAkC,gBAAO,EAAClC,KAAG,GAAG,IAAI,GAAG,IAAI,CAACsB,OAAO,CAACtB,KAAG,CAAC,GAAG,IAAI,CAAC;UAChD;QACF;MACF;IACF;EAAC;IAAAA,GAAA;IAAA2B,KAAA,EAED,SAAA4B,UACEvD,GAAW,EAGX;MAAA,IAFAwD,SAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG9C,mBAAmB,CAAC,CAAC;MAAA,IAC1CiD,MAAe,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAEf,IAAI,IAAI,CAACnC,OAAO,EAAE;QAChB,IAAIjB,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EAAC,sDAAsD,EAAElC,GAAG,CAAC;QACtE;QACA;MACF;MACA,IAAI,IAAI,CAACsB,OAAO,CAACtB,GAAG,CAAC,IAAI,IAAI,EAAE;QAC7B,IAAIO,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,6EAA6E,EAC7ElC,GACF,CAAC;QACH;QACA;MACF;MACA,IAAI,CAACsB,OAAO,CAACtB,GAAG,CAAC,GAAGwD,SAAS;MAC7B,IAAII,MAAM,EAAE;QACV,IAAI,CAACrC,YAAY,CAACvB,GAAG,CAAC,GAAG4D,MAAM;MACjC;MAEA,IAAI,IAAI,CAACnC,2BAA2B,EAAE;QACpChB,WAAW,CAACoD,IAAI,CAAE,GAAErD,sBAAuB,IAAGR,GAAI,EAAC,EAAE;UACnD6B,SAAS,EAAE2B;QACb,CAAC,CAAC;MACJ;IACF;EAAC;IAAAxD,GAAA;IAAA2B,KAAA,EAED,SAAAmC,YAAY9D,GAAW,EAAe;MACpC,IAAM2B,KAAK,GAAG,IAAI,CAACN,OAAO,CAACrB,GAAG,CAAC;MAC/B,OAAO,IAAI,CAACqB,OAAO,CAACrB,GAAG,CAAC;MACxB,OAAO2B,KAAK;IACd;EAAC;IAAA3B,GAAA;IAAA2B,KAAA,EAED,SAAAoC,SAAS/D,GAAW,EAAE2B,KAAiB,EAAE;MACvC,IAAI,IAAI,CAACH,OAAO,EAAE;QAChB,IAAIjB,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EAAC,qDAAqD,EAAElC,GAAG,CAAC;QACrE;QACA;MACF;MAEA,IAAI,IAAI,CAACqB,OAAO,CAACnB,cAAc,CAACF,GAAG,CAAC,EAAE;QACpC,IAAIO,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,oEAAoE,EACpE;YAAClC,GAAG,EAAHA,GAAG;YAAEgE,YAAY,EAAE,IAAI,CAAC3C,OAAO,CAACrB,GAAG,CAAC;YAAEiE,cAAc,EAAEtC;UAAK,CAC9D,CAAC;QACH;QACA;MACF;MACA,IAAI,CAACN,OAAO,CAACrB,GAAG,CAAC,GAAG2B,KAAK;IAC3B;EAAC;IAAA3B,GAAA;IAAA2B,KAAA,EAED,SAAAuC,cACElE,GAAW,EAGX;MAAA,IAFAwD,SAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG9C,mBAAmB,CAAC,CAAC;MAAA,IAC1CiD,MAAe,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAEf,IAAI,IAAI,CAACnC,OAAO,EAAE;QAChB,IAAIjB,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,0DAA0D,EAC1DlC,GACF,CAAC;QACH;QACA;MACF;MAEA,IAAI,IAAI,CAACoB,UAAU,CAACpB,GAAG,CAAC,EAAE;QACxB,IAAIO,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,wEAAwE,EACxElC,GACF,CAAC;QACH;QACA;MACF;MAEA,IAAI,CAACoB,UAAU,CAACpB,GAAG,CAAC,GAAG;QACrB6B,SAAS,EAAE2B,SAAS;QACpBzB,WAAW,EAAE6B;MACf,CAAC;MACDtD,QAAQ,CAACN,GAAG,CAAC,GAAGvB,QAAQ,CAAC0F,eAAe,CAACnE,GAAG,CAAC;MAC7C,IAAIO,gBAAgB,EAAE;QACpB,IAAA2B,gBAAO,EAAC,sBAAsB,EAAE,SAAS,GAAGlC,GAAG,CAAC;MAClD;MAEA,IAAI,IAAI,CAACyB,2BAA2B,EAAE;QACpChB,WAAW,CAACoD,IAAI,CAAE,GAAErD,sBAAuB,mBAAkBR,GAAI,EAAC,EAAE;UAClE6B,SAAS,EAAE2B;QACb,CAAC,CAAC;MACJ;IACF;EAAC;IAAAxD,GAAA;IAAA2B,KAAA,EAED,SAAAyC,aACEpE,GAAW,EAGX;MAAA,IAFAwD,SAAkB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG9C,mBAAmB,CAAC,CAAC;MAAA,IAC1CiD,MAAe,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;MAEf,IAAI,IAAI,CAACnC,OAAO,EAAE;QAChB,IAAIjB,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EAAC,yDAAyD,EAAElC,GAAG,CAAC;QACzE;QACA;MACF;MAEA,IAAMqE,QAAQ,GAAG,IAAI,CAACjD,UAAU,CAACpB,GAAG,CAAC;MACrC,IAAI,CAACqE,QAAQ,IAAIA,QAAQ,CAACxC,SAAS,IAAI,IAAI,EAAE;QAC3C,IAAItB,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,uEAAuE,EACvElC,GACF,CAAC;QACH;QACA;MACF;MACA,IAAIqE,QAAQ,CAACvC,OAAO,IAAI,IAAI,EAAE;QAC5B,IAAIvB,gBAAgB,IAAI0B,OAAO,EAAE;UAC/B,IAAAC,gBAAO,EACL,yEAAyE,EACzElC,GACF,CAAC;QACH;QACA;MACF;MAEAqE,QAAQ,CAACrC,SAAS,GAAG4B,MAAM;MAC3BS,QAAQ,CAACvC,OAAO,GAAG0B,SAAS;MAC5Ba,QAAQ,CAAClC,SAAS,GAAGkC,QAAQ,CAACvC,OAAO,IAAIuC,QAAQ,CAACxC,SAAS,IAAI,CAAC,CAAC;MACjE,IAAItB,gBAAgB,EAAE;QACpB,IAAA2B,gBAAO,EAAC,sBAAsB,EAAE,OAAO,GAAGlC,GAAG,CAAC;MAChD;MAEA,IAAIM,QAAQ,CAACN,GAAG,CAAC,IAAI,IAAI,EAAE;QACzBvB,QAAQ,CAAC6F,aAAa,CAACtE,GAAG,EAAEM,QAAQ,CAACN,GAAG,CAAC,CAAC;QAC1C,OAAOM,QAAQ,CAACN,GAAG,CAAC;MACtB;MAEA,IAAI,IAAI,CAACyB,2BAA2B,EAAE;QACpChB,WAAW,CAAC2B,OAAO,CAAE,GAAE5B,sBAAuB,IAAGR,GAAI,EAAC,EAAE;UACtDqC,KAAK,EAAG,GAAE7B,sBAAuB,mBAAkBR,GAAI,EAAC;UACxDsC,GAAG,EAAEkB;QACP,CAAC,CAAC;MACJ;IACF;EAAC;EAAA,OAAAvC,iBAAA;AAAA;AAYY,SAASsD,uBAAuBA,CAC7CrD,0BAAoC,EAChB;EACpB,OAAO,IAAID,iBAAiB,CAACC,0BAA0B,CAAC;AAC1D"},"metadata":{},"sourceType":"script","externalDependencies":[]}